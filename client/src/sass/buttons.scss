@use 'variables.scss' as v;
@use 'sass:color';

@each $name, $value in v.$color-scheme {
    $is-light-bg: v.is-color-light($value);
    $is-neutral-bg: v.is-color-neutral($value);
    $is-dark-bg: v.is-color-dark($value);
    
    .btn.btn-#{$name} {
        transition-duration: 0.2s;
        background-color: $value !important;

        &:hover {
            box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                        0 17px 50px 0 rgba(0,0,0,0.19);
        }

        @if ($is-light-bg) {
            color: v.$dark-purple !important;

            &:hover {
                background-color: v.$black !important;
                color: v.$white !important;
            }

            &.hover-invert {
                &:hover {
                    background-color: v.$black !important;
                    color: v.$white !important;
                }
            }

            &.hover-lighten {
                &:hover {
                    color: v.$dark-purple !important;
                }
            }

            &.hover-darken {
                &:hover {
                    color: v.$dark-purple !important;
                }
            }
        }
        @else {
            color: v.$white !important;

            &:hover {
                background-color: v.$white !important;
                color: v.$black !important;
            }

            &.hover-invert {
                &:hover {
                    background-color: v.$white !important;
                    color: v.$black !important;
                }
            }

            &.hover-lighten {
                &:hover {
                    color: v.$white !important;
                }
            }

            &.hover-darken {
                &:hover {
                    color: v.$white !important;
                }
            }
        }
        
        &.hover-lighten {
            &:hover {
                background-color: color.scale($color: $value, $lightness: 10%, $space:lab) !important;
            }
        }

        &.hover-darken {
            &:hover {
                background-color: color.scale($color: $value, $lightness: -10%, $space:lab) !important;
            }
        }

        @each $opacity in v.$opacities {
            &.translucent-#{$opacity * 100} {
                $translucent-bg: color.change($color: $value, $alpha: $opacity);

                background-color: $translucent-bg !important;

                @if ($is-light-bg) {
                    &:hover {
                        background-color: color.change($color: v.$black, $alpha: $opacity) !important;
                    }

                    &.hover-invert {
                        &:hover {
                            background-color: color.change($color: v.$black, $alpha: $opacity) !important;
                        }
                    }
                }
                @else {
                    &:hover {
                        background-color: color.change($color: v.$white, $alpha: $opacity) !important;
                    }
                    
                    &.hover-invert {
                        &:hover {
                            background-color: color.change($color: v.$white, $alpha: $opacity) !important;
                        }
                    }
                }

                &.hover-lighten {
                    &:hover {
                        background-color: color.scale($color: $translucent-bg, $lightness: 10%, $space:lab) !important;
                    }
                }

                &.hover-darken {
                    &:hover {
                        background-color: color.scale($color: $translucent-bg, $lightness: -10%, $space:lab) !important;
                    }
                }
            }
        }
    }
}

@each $name, $value in v.$color-scheme {
    $is-light-bg: v.is-color-light($value);
    $is-neutral-bg: v.is-color-neutral($value);
    $is-dark-bg: v.is-color-dark($value);

    .btn.page-#{$name} {
        transition-duration: 0.2s;
        background-color: transparent !important;
        color: v.$white !important;

        @if ($is-light-bg) {
            &:hover {
                background-color: $value !important;
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                            0 17px 50px 0 rgba(0,0,0,0.19);
            }

            &.active {
                background-color: v.$white !important;
                color: v.$black !important;
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                            0 17px 50px 0 rgba(0,0,0,0.19);
            }
            &.disabled {
                background-color: $value !important;
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                            0 17px 50px 0 rgba(0,0,0,0.19);
            }
        }
        @else {
            &:hover {
                background-color: $value !important;
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                            0 17px 50px 0 rgba(0,0,0,0.19);
            }
            &.active {
                background-color: v.$black !important;
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                            0 17px 50px 0 rgba(0,0,0,0.19);
            }
            &.disabled {
                background-color: $value !important;
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 
                            0 17px 50px 0 rgba(0,0,0,0.19);
            }
        }
        
        @each $opacity in v.$opacities {
            &.translucent-#{$opacity * 100} {
                background-color: transparent !important;

                @if ($is-light-bg) {
                    &:hover {
                        background-color: color.change($color: v.$white, $alpha: $opacity) !important;
                    }
                    &.active {
                        background-color: color.change($color: v.$white, $alpha: 1) !important;
                    }
                    &.disabled {
                        background-color: color.change($color: v.$white, $alpha: $opacity) !important;
                    }
                }
                @else {
                    &:hover {
                        background-color: color.change($color: v.$black, $alpha: $opacity) !important;
                    }
                    &.active {
                        background-color: color.change($color: v.$black, $alpha: 1) !important;
                    }
                    &.disabled {
                        background-color: color.change($color: v.$black, $alpha: $opacity) !important;   
                    }
                }
            }
        }
    }
}

@each $name, $value in v.$utility-colors {
    .btn.btn-#{$name} {
        background-color: $value !important;

        @each $opacity in v.$opacities {
            &.translucent-#{$opacity * 100} {
                background-color: color.change($color: $value, $alpha: $opacity) !important; 
            }
         }
    }
}